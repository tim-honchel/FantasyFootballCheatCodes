@page "/EnterEspnLeagueInformation"
@inject IApiCallService service
@inject IConfiguration configuration
@inject NavigationManager navigation
@inject UserData userData
@using Fantasy.Presentation.Data.Exceptions
@using Fantasy.Presentation.Data.RequestObjects
@using Fantasy.Presentation.Data.State
@using Fantasy.Presentation.Data.ViewModels
@using Fantasy.Presentation.Services.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Configuration

<PageTitle>Enter ESPN League Information</PageTitle>

<h1>Enter ESPN League Information</h1>

<EditForm id="form" Model="espnModel" Context="espnContext" OnValidSubmit="HandleValidSubmit">



    <label for="LeagueID" class="control-label">ESPN League ID</label>
    <br />
    <button class="help-find" type="button" @onclick="HelpFindLeagueID">Where do I find this?</button>
    <br />
    @if (helpLeagueID == true)
    {
        <br />
        <img src="images/screenshots/espn-league-id.jpg"/>
        <br />
        <br />
    }
    <InputText @bind-Value="espnModel.LeagueID" id="leagueID" style = "width:150px"/>

    <br />
    <br />

    <label for="espn_s2" class="control-label">espn_s2 Cookie</label>
    <br />
    <button class="help-find" type="button" @onclick="HelpFindEspnCookie">Where do I find this?</button>
    <br />    
    @if (helpEspnCookie == true)
    {
        <br />
        <p>(1) go to your ESPN league (2) right-click and select "Inspect" (3) in the top menu, select the "Application" tab (4) in the left menu, select "Cookies" and click "fantasy.espn.com" (5) find the value for "espn_s2" (sort by name)" (6) copy and paste the entire value</p>
        <img src="images/screenshots/espn-cookie-1.jpg" />
        <br />
        <br />
    }
    <InputTextArea @bind-Value="espnModel.espn_s2" id="espn_s2" style="width:100%; height:80px"/>

    <br />
    <br />


    <label for="swid" class="control-label">swid Cookie</label>
    <br />
    <button class="help-find" type="button" @onclick="HelpFindSwidCookie">Where do I find this?</button>
    <br />
    @if (helpSwidCookie == true)
    {
        <br />
        <p>(1) go to your ESPN league (2) right-click and select "Inspect" (3) in the top menu, select the "Application" tab (4) in the left menu, select "Cookies" and click "fantasy.espn.com" (5) find the value for "swid" (sort by name)" (6) copy and paste the entire value</p>
        <img src="images/screenshots/espn-cookie-1.jpg" />
        <br />
        <br />
    }
    <InputText @bind-Value="espnModel.swid" id="swid" style ="width:420px"/>

    <br />
    <br />

    <button type="submit" class="btn btn-primary next-button">Next</button>
    <br />
    <br />
   

</EditForm>

@code {
    private EspnRulesRequestObject espnModel = new();
    private bool helpLeagueID = false;
    private bool helpEspnCookie = false;
    private bool helpSwidCookie = false;

    public async void HandleValidSubmit()
    {
        navigation.NavigateTo("Loading");
        RulesESPNViewModel espnRules = new();
        try
        {
            espnRules = await service.EspnRules(espnModel);
        }
        catch (LeagueNotFoundException)
        {
            navigation.NavigateTo("Error/LeagueNotFound");
            return;
        }
        catch (LeagueNotAccessibleException)
        {
            navigation.NavigateTo("Error/LeagueNotAccessible");
            return;
        }

        LeagueRulesRequestObject leagueRulesRequest = new() { Provider = Provider.ESPN, EspnRules = espnRules};
        RulesViewModel rules = await service.LeagueRules(leagueRulesRequest);

        EspnPlayersRequestObject espnPlayersRequest = new() { LeagueID = espnModel.LeagueID, espn_s2 = espnModel.espn_s2, swid = espnModel.swid, Rules = rules};
        List<PlayerESPNViewModel> espnPlayers = await service.EspnPlayers(espnPlayersRequest);

        PlayerProjectionsRequestObject playerProjectionsRequest = new() { Players = espnPlayers };
        List<PlayerViewModel> players = await service.PlayerProjections(playerProjectionsRequest);

        ValidRulesRequestObject validRulesRequest = new() { Rules = rules, Players = players };
        RuleValidityViewModel ruleValidity = await service.ValidRules(validRulesRequest);

        if (ruleValidity.IsValid)
        {
            userData.Rules = rules;
            userData.Players = players;
            navigation.NavigateTo("LeagueRulesAndProjections");
        }
        else
        {
            navigation.NavigateTo("Error/LeagueNotSupported");
        }
    }

    public void HelpFindLeagueID()
    {
        if(helpLeagueID == false)
        {
            helpLeagueID = true;
        }
        else
        {
            helpLeagueID = false;
        }
    }

    public void HelpFindEspnCookie()
    {
        if (helpEspnCookie == false)
        {
            helpEspnCookie = true;
        }
        else
        {
            helpEspnCookie = false;
        }
    }

    public void HelpFindSwidCookie()
    {
        if (helpSwidCookie == false)
        {
            helpSwidCookie = true;
        }
        else
        {
            helpSwidCookie = false;
        }
    }

    protected override void OnParametersSet()
    {
        bool demo = Convert.ToBoolean(configuration["DemoEspn"]);
        if (demo == true)
        {
            espnModel.LeagueID = configuration["DemoEspnLeagueID"];
            espnModel.espn_s2 = configuration["DemoEspnCookie1"];
            espnModel.swid = configuration["DemoEspnCookie2"];
        }
        base.OnParametersSet();
    }



}