@inject UserData userData;
@using Fantasy.Presentation.Data.State;
@using Fantasy.Presentation.Data.ViewModels

    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog shadow-lg bg-white rounded" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Projections</h5>
                </div>
                <div class="modal-body">
                    <EditForm Model="playerToEdit" OnValidSubmit="HandleValidSubmit">
                        <div>
                            <p>@playerToEdit?.Position - @playerToEdit?.FirstInitial @playerToEdit?.LastName - @playerToEdit?.Team</p>
                        </div>
                        <div class="form-group row">
                            <label class="col-3 col-form-label">Cost: </label>
                            <InputNumber class="col-8 form-control" @bind-Value="playerToEdit.Cost" />
                        </div>
                        <div class="form-group row">
                            <label class="col-3 col-form-label">Points Per Week: </label>
                            <InputNumber class="col-8 form-control" @bind-Value="playerToEdit.WeeklyPoints" />
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

@code {

    [Parameter]
    public PlayerViewModel? playerToEdit { get; set; }

    [Parameter]
    public bool showEditModal { get; set; } = false;

    [Parameter]
    public EventCallback<bool> showEditModalChanged { get; set; }

    public int cost;
    public double points;



    public async Task Close()
    {
        if (playerToEdit != null)
        {
            playerToEdit.Cost = cost;
            playerToEdit.WeeklyPoints = points;
        }
        showEditModal = false;
        await showEditModalChanged.InvokeAsync(showEditModal);
        StateHasChanged();
    }

    public async Task HandleValidSubmit()
    {
        showEditModal = false;
        await showEditModalChanged.InvokeAsync(showEditModal);
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        if (playerToEdit != null)
        {
            cost = playerToEdit.Cost;
            points = playerToEdit.WeeklyPoints;
        }
        else
        {
            cost = 0;
            points = 0;
        }
        base.OnParametersSet();
    }

}
